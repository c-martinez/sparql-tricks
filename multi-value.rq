#+ summary: Multi-value placeholder hack
#+ method: GET
#+ description: Tested with Virtuoso and RDF4J SPARQL endpoints.
#+ endpoint: https://dbpedia.org/sparql
#+ defaults:
#+   - placeholder: http://dbpedia.org/resource/Alternative_rock http://dbpedia.org/resource/Rock_music

PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?band ?album ?genre WHERE {

  #=================== MULTI-VALUE PLACEHOLDER ====================#
  { select ?genreliteral {                                         # <- VAR value
    bind(?_placeholder as ?v)                                      # <- VAR _placeholder
    {select*{optional{?a ?b ?c}}limit 1} # (for some Virtuoso v.)  #
    values ?x{0 1 2 3 4 5 6 7 8 9} values ?y{0 1 2 3 4 5 6 7 8 9}  #
    bind((10*?x)+?y as ?n) # (works for a maximum of 100 values)   #
    bind(" " as ?sep) # (separator as regex-compatible character)  # <- CONST sep
    bind(concat("^([^",?sep,"]*",?sep,"){",str(?n),"}") as ?p)     #
    bind(concat(?sep,".*") as ?p0)                                 #
    filter(if(?n=0,true,regex(?v,?p))) # (=0 check for Virtuoso)   #
    bind(replace(if(?n=0,?v,replace(?v,?p,"")),?p0,"") as ?genreliteral)  # <- VAR value
  } }                                                              #
  #================================================================#

  # The value is a literal. You can make a URI out of it like this:
  bind(uri(?genreliteral) as ?genre)

  ?band rdf:type dbo:Band .
  ?album rdf:type schema:MusicAlbum .
  ?band dbo:genre ?genre .
  ?album dbp:artist ?band .

} LIMIT 100
